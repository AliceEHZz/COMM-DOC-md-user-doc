{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>\ud83d\udc4b Welcome to this documentation on DDL, DQL, and DML - three essential components of the Structured Query Language (SQL) language that are used to manage relational databases. By reading this document, you will gain an understanding of the basics of SQL syntax that are common to all relational databases, and learn how to perform common operations on a database using SQL. So, let's dive into the world of SQL!</p> <p>SQL is a standard language for storing, manipulating, and retrieving data in databases. Apart from querying data, the language serves several other purposes in database management operations, such as creating, modifying, and removing records or database objects, defining relationships between objects, and setting constraints.</p> <p>Therefore, the language is multi-functional, enabling developers to carry out various data manipulation and management tasks within a database.</p> <p>SQL commands are classified into five categories based on their purpose:</p> <ul> <li>Data Definition Language (DDL) - used to define the database schema and structure (<code>CREATE</code>, <code>ALTER</code>, <code>DROP</code>).</li> <li>Data Manipulation Language (DML) - used to manipulate data within the database (<code>INSERT</code>, <code>UPDATE</code>, <code>DELETE</code>).</li> <li>Data Query Language (DQL) - used to retrieve data from the database (<code>SELECT</code>).</li> <li>Data Control Language (DCL) - used to control access to the database (<code>GRANT</code>, <code>REVOKE</code>).</li> <li>Transaction Control Language (TCL) - used to manage database transactions (<code>COMMIT</code>, <code>ROLLBACK</code>, <code>SAVEPOINT</code>).</li> </ul> <p>In this documentation, we will be focusing specifically on the first three categories of SQL commands: DDL, DML, and DQL. These categories are particularly important for building and managing relational databases, as they allow you to define the structure of your database, retrieve data from it, and manipulate that data as needed.</p>"},{"location":"#intended-users","title":"Intended Users","text":"<p>This documentation is aimed at two main groups of users:</p> <ul> <li>Relational database beginners who are just starting to learn SQL and want to gain a deeper understanding of the language.</li> <li>Software development teams working on small or medium-sized web applications, who want to improve their skills in using SQL for building and managing databases.</li> </ul> <p>Whether you are a complete newcomer to SQL or a seasoned developer looking to enhance your skills, this documentation will provide you with a comprehensive guide to using DDL, DQL, and DML effectively in your database management tasks.</p>"},{"location":"#prerequisite-knowledge-and-skills","title":"Prerequisite Knowledge and Skills","text":"<p>Up to this point, you should be able to perform the following tasks using the mouse in the MySQL workbench:</p> <ul> <li>Create database objects in MySQL Workbench</li> <li>Create Entity Relationship Diagrams</li> <li>Add primary keys and foreign keys</li> <li>Add constraints to tables</li> <li>Familiar with data types in MySQL</li> </ul>"},{"location":"#software-requirements","title":"Software Requirements","text":"<p>While SQL is a widely used language that can be implemented in many software applications, in this documentation, we will specifically focus on using MySQL Workbench.</p> <p>If you haven't installed MySQL Workbench yet, you can download the latest version (v8.0.32) from the link \ud83d\udc49 MySQL Workbench Installation, and follow the installation steps here \ud83d\udc49 Workbench Installation Guide</p>"},{"location":"#procedures-overview","title":"Procedures Overview","text":"<p>Below is a summary of the main sections covered in this documentation:</p> <ul> <li>DDL</li> <li>DML</li> <li>DQL</li> <li>Troubleshooting</li> <li>Glossary</li> </ul>"},{"location":"#typography-guidelines","title":"Typography Guidelines","text":"<ol> <li> <p>Code blocks in this documentation may include clickable notes. These notes can be helpful if you need further explanation for a particular piece of code that you are unfamiliar with. Below is an example of a code block with a clickable note:</p> <pre><code>SELECT FULL_NAME FROM person; --(1)\n</code></pre> <ol> <li>Shows all rows in the \"FULL_NAMe\" column from the person table</li> </ol> </li> <li> <p>Inline commands are presented in a monospace font to distinguish them from the regular text: <code>CREATE</code></p> </li> <li> <p>Instruction screenshots may include red squared rectangles that point to key information or message:      A success message in the \"Output\" - \"Action Output\" section is bordered by a red rectangle </p> </li> <li> <p>Message blocks are used to draw your attention to relevant information:</p> <p>Note</p> <p>indicates important knowledge that needs to be addressed or communicated to the user.</p> <p>Danger</p> <p>indicates a potentially dangerous command or action that must be used with caution to avoid uncoverable results.</p> <p>Tip</p> <p>indicates error message information or provides tips that can help users troubleshoot common issues.</p> </li> </ol> <p>Now let's start with our first SQL component \ud83d\udc49 DDL</p> <p>Author: Alice</p>"},{"location":"DDL/","title":"Data Definition Language (DDL)","text":"<p>In this section, we will cover the following DDL commands and create a new schema and a new table in MySQL:</p> <ul> <li><code>CREATE</code></li> <li><code>ALTER</code></li> <li><code>DROP</code></li> </ul> <p>By the end of this section, you will have a good understanding of how to use these commands to create, alter and drop your database structure effectively.</p>"},{"location":"DDL/#create-command","title":"CREATE Command","text":"<p>The CREATE command is used to create new objects in SQL such as schemas, tables, indexes and constraints. Instead of using both mouse and keyboard to create a schema, this time we will use only keyboard and type our commands in a query script to create a new schema and table. Let's open MySQL Workbench and get started \ud83d\udd25!</p>"},{"location":"DDL/#create-database","title":"CREATE Database","text":"<ol> <li> <p>Open Local instance MySQL80 by single clicking the MySQL80 rectangle.</p> <p></p> </li> <li> <p>Click the \"new SQL file\" button on the left corner of your Workbench.</p> <p></p> <p>This will give us a query text window where we can type our SQL commands.</p> <p></p> </li> <li> <p>Type the commands below in your query text window:</p> <pre><code>CREATE DATABASE intro_to_sql;\n</code></pre> <p>This will create a new schema named \"intro_to_sql\".</p> <p>Execute Buttons </p> <p>Execute button  is used to execute all the commands in the sql file.</p> <p>Cursor Execute button  is used to run a single command where the keyboard cursor is. The keyboard shortcut for this is CTRL + Enter on Windows or CMD+Enter (\u2318+Enter) on Mac.</p> </li> <li> <p>Click Execute button .</p> <p>After executing a success message \"CREATE DATABASE intro_to_sql\" will display in the \"Output\" - \"Action Output\" section on the bottom of your Workbench.</p> <p></p> </li> <li> <p>Click the refresh button on the right corner of the navigator to make sure the new database is added to your SCHEMAS list.</p> <p></p> </li> <li> <p>Type and execut the commands below to set \"intro_to_sql\" as the default schema:</p> <pre><code>USE intro_to_sql;\n</code></pre> <p>The default schema will be bolded in your schema list.</p> <p></p> </li> </ol> <p>Congratulations \ud83c\udf89! You have successfully created a new schema \"intro_to_sql\". Next, let's add a new table to our new schema.</p>"},{"location":"DDL/#create-table","title":"CREATE Table","text":"<p>In this example, we will create a table named \"employee\" with five columns: \"EMP_ID\", \"FIRST_NAME\", \"LAST_NAME\", \"SALARY\" and \"BONUS\". The \"EMP_ID\" column is the primary key, and other columns are required (NOT NULL).</p> <p>Type and execute the commands below:</p> <pre><code>CREATE TABLE `employee` ( --(1)\n`EMP_ID` INT NOT NULL AUTO_INCREMENT, --(2)\n`FIRST_NAME` VARCHAR(45) NOT NULL, --(3)\n`LAST_NAME` VARCHAR(45) NOT NULL,\n`SALARY` INT NOT NULL, --(4)\n`BONUS` INT NOT NULL,\nPRIMARY KEY (`EMP_ID`) --(5)\n);\n</code></pre> <ol> <li>This line of code will name the new table as \"employee\".</li> <li>This code will make a column called \"EMP_ID\" that's an integer (INT), required (NOT NULL), and increases automatically(AUTO_INCREMENT).</li> <li>This code will make a column called \"FIRST_NAME\" that's a string with length &lt;=45 (VARCHAR(45)) and can't be empty.</li> <li>This code will make a column called \"SALARY\" that's an integer and can't be empty.</li> <li>This code will set \"EMP_ID\" as the primary key.</li> </ol> <p>Refresh the schema list in the navigator, and you will see the employee table under \"intro_to_sql\" schema. And a success message is shown in the \"Output\" section.</p> <p></p> <p>Good Job \ud83c\udf89! You just created a new table using DDL CREATE command.</p> Note <p>In SQL, by default, most commands are not case-sensitive. This means that you can use uppercase or lowercase letters interchangeably when writing commands or queries, and SQL will treat them the same way.</p> <p>For example, the following two queries are equivalent:</p> <p><pre><code>SELECT * FROM employee;\n</code></pre>   and   <pre><code>select * from employee;\n</code></pre>   However, uppercase letters are commonly used for keywords, such as CREATE, ALTER, DROP, SELECT, INSERT, etc. In this documentation, we will follow this rule and use uppercase letters for all keywords.</p>"},{"location":"DDL/#alter-command","title":"ALTER Command","text":"<p>The ALTER command is used to modify the structure of existing database objects. It can add, delete, or modify columns and constraints in a table. In the example below, we will use ALTER to add columns to the \"employee\" table.</p> <p>Type and execute the commands below:</p> <pre><code>ALTER TABLE employee\nADD AGE INT,\nADD BIRTH_DATE DATE;\n</code></pre> <p>You've added an \"AGE\" column and a \"BIRTH_DATE\" column to your employee table.</p> <p></p>"},{"location":"DDL/#drop-command","title":"DROP Command","text":"<p>The DROP command is used to remove existing database objects such as databases, tables, indexes, and constraints.</p> <p>Type and execute the command below:</p> <pre><code>ALTER TABLE employee\nDROP COLUMN BIRTH_DATE,\nDROP COLUMN AGE;\n</code></pre> <p>In this example, we deleted both \"AGE\" column and \"BIRTH_DATE\" column in the \"employee\" table.</p> <p></p> <p>Now let's try some dangerous commands. </p> <ol> <li> <p>Type and execute the command below:</p> <pre><code>CREATE DATABASE test_drop;\nUSE test_drop;\nCREATE TABLE `test` (\n`id` INT NOT NULL AUTO_INCREMENT,\n`description` VARCHAR(45) NOT NULL,\nPRIMARY KEY (`id`)\n);\n</code></pre> <p>This would create a new schema called \"test_drop\" for us to test the <code>DROP</code> command, set it as default, and create a table called \"test\" in this schema.</p> </li> <li> <p>Then type and execute the command below:</p> <pre><code>DROP DATABASE test_drop;\n</code></pre> </li> </ol> <p>Your \"test_drop\" schema including the \"test\" table is permanently deleted without any warning message* when you execute the above command.</p> <p>Danger</p> <p>The <code>DROP DATABASE</code> command deletes the database and all its tables and data. It will delete the specified object permanently, so use it with caution.</p>"},{"location":"DDL/#conclusion","title":"Conclusion","text":"<p>We hope this section has been helpful with your learning journey on the following:</p> <ul> <li> Using CREATE to create new database objects such as schema, table and column</li> <li> Using USE to set a schema to default</li> <li> Using ALTER to modify the database objects</li> <li> Using DROP to delete database objects</li> </ul> <p>In the next section, we will go through SQL DML commands, which are used to manipulate data in the database. With these commands, you can retrieve, insert, update, and delete data from your database.</p> <p>Let's continue learning! \ud83d\udc49 DML</p> <p>Author: Alice</p>"},{"location":"DML/","title":"Data Manipulation Language (DML)","text":"<p>In this section, we will cover some basic DML commands, which are used to insert, update, and delete rows from the tables. We will go cover the following DML commands to manipulate some data in the table:</p> <ul> <li> <p><code>INSERT</code></p> </li> <li> <p><code>UPDATE</code></p> </li> <li> <p><code>DELETE</code></p> </li> </ul> <p>By the end of this section, you will have a good understanding of how to use these commands to manage your table effectively. Let's continue practicing in MySQL Workbench! </p>"},{"location":"DML/#insert-command","title":"INSERT Command","text":"<p>The <code>INSERT</code> statement is used to add new rows of data to a table. You can add commands in your current SQL file.</p> <ol> <li> <p>Type and execute the commands below to set the \"intro_to_sql\" schema back to default:</p> <pre><code>USE intro_to_sql;\n</code></pre> </li> <li> <p>Type and execute the commands below:</p> <pre><code>INSERT INTO employee --(1)\n(FIRST_NAME, LAST_NAME, SALARY, BONUS) --(2)\nVALUES\n('John', 'Smith', 50000, 1000),\n('Jane', 'Doe', 60000, 3000),\n('Bob', 'Johnson', 70000, 500); --(3)\n</code></pre> <ol> <li>This line of code will insert some data into the \"employee\" table.</li> <li>This line of code will specify the columns you need to fill in the table.</li> <li>These lines of code will insert those data into the table in the order of the column.</li> </ol> <p>After you execute you should see a success message \"3 row(s) returned\" in the \"Output\" - \"Action Output\" section.</p> <p>\u2714\ufe0fThese commands insert three new rows to the \"employee\" table with the data in the <code>VALUES</code>. You should be able to see the changes in the table.</p> <p></p> </li> </ol>"},{"location":"DML/#update-command","title":"UPDATE Command","text":"<p>The <code>UPDATE</code> statement is used to modify existing rows of data in a table.</p> <p>Type and execute the code chunk below:</p> <pre><code>UPDATE employee --(1)\nSET SALARY = 65000 --(2)\nWHERE LAST_NAME = 'Doe'; --(3)\n</code></pre> <ol> <li>This line of code will tell MySQL that we wil update the \"employee\" table.</li> <li>In this line, you need to provide the data you want to update.</li> <li>Specify the rows you need to update with the new data.</li> </ol> <p>After you execute you should see a success message \"3 row(s) returned\" in the \"Output\" - \"Action Output\" section.</p> <p>\u2714\ufe0fThis statement updates the salary for all employees with the last name \"Doe\" to 65000 in the \"employee\" table.</p> <p>The table now is updated with the latest data you just changed.</p> <p></p> <p>Tip</p> <p>There is a chance that you may see the error message below: </p> <p>You are using safe update mode and you tried to update a table without a <code>WHERE</code> that uses a KEY column.  To disable safe mode, toggle the option in Preferences -&gt; SQL Editor and reconnect.</p> <p>You can either manually disable the safe mode or add a line of code above the update code chunk.</p> <pre><code>SET SQL_SAFE_UPDATES = 0;\n</code></pre> <p>This line of code will also disable the safe mode for you. Then, you can try to execute the code chunk again.</p> <p><code>WHERE</code> Clause in <code>UPDATE</code> Command</p> <p>Be careful with the <code>WHERE</code> clause in the <code>UPDATE</code> command.</p> <p>The <code>WHERE</code> clause determines which records in the table will be updated. If you forget to include a <code>WHERE</code> clause, the update will be applied to all records in the table, which could lead to unintended consequences. Make sure you double-check your <code>WHERE</code> clause to ensure that it is targeting only the records you want to update.</p>"},{"location":"DML/#delete-command","title":"DELETE Command","text":"<p>The <code>DELETE</code> statement is used to remove rows of data from a table.</p> <p>Copy the code chunk below to your SQL file and execute:</p> <pre><code>DELETE FROM employee --(1)\nWHERE LAST_NAME = 'Doe'; --(2)\n</code></pre> <ol> <li>Tell MySQL that you are going to delete something from the \"employee\" table.</li> <li>Tell MySQL which rows you want to delete.</li> </ol> <p>After you execute you should see this message in your \"Action Output\":</p> <p>1 row(s) affected</p> <p>\u2714\ufe0fThis statement deletes all rows from the \"employee\" table where the last name is \"Doe\". Now, we should not be able to see Jane Doe's data in the \"employee\" table.</p> <p><code>WHERE</code> Clause in <code>DELETE</code> Command</p> <p>Be careful with the <code>WHERE</code> clause in the <code>DELETE</code> command.</p> <p>The <code>WHERE</code> clause determines which records in the table will be deleted. If you forget to include a <code>WHERE</code> clause, the delete operation will remove all records in the table, which could lead to unintended consequences. Make sure you double-check your <code>WHERE</code> clause to ensure that it is targeting only the records you want to delete.</p> <p></p> <p>In order to do the next task, you need to clear all the data in the current table and insert some new data.</p> <p>Copy the code chunk below to your SQL file and execute:</p> <pre><code>DELETE FROM employee;\nINSERT INTO employee (FIRST_NAME, LAST_NAME, SALARY, BONUS)\nVALUES\n('John', 'Smith', 50000, 1000),\n('Jane', 'Doe', 60000, 3000),\n('Bob', 'Johnson', 70000, 500),\n('Alice', 'Wonderland', 100000, 4000);\n</code></pre>"},{"location":"DML/#conclusion","title":"Conclusion","text":"<p>\ud83c\udf87We hope this section has been helpful with your learning journey on the <code>INSERT</code>, <code>UPDATE</code>, and <code>DELETE</code> commands. You can easily insert, update, and delete table objects using these commands to fit your needs.</p> <p>In the next section, we will cover SQL DQL commands, which are used to retrieve data from the database. With these commands, you can select the specific dataset.</p> <p>Let's continue learning! \ud83d\udc49 DQL</p> <p>Author: Xiao</p>"},{"location":"DQL/","title":"Data Query Language (DQL)","text":"<p>The goal of this document is to serve as an introduction to querying a database using the <code>SELECT</code> statement. The <code>SELECT</code> statement has a number of parts and can perform many different tasks for retrieving data from the database.</p> <p>A <code>SELECT</code> statement has the following parts or clauses:</p> <ul> <li><code>FROM</code></li> <li><code>WHERE</code></li> <li><code>GROUP BY</code></li> <li><code>HAVING</code></li> <li><code>ORDER BY</code></li> </ul> <p>Each clause in the <code>SELECT</code> statement (aside from <code>SELECT</code> itself) is optional. The individual optional clauses can be combined or omitted as needed.</p> <p>Although the <code>SELECT</code> statement can retrieve data from multiple tables at once, in this section we will focus on retrieving different types of data from a single table using only <code>SELECT</code> and <code>FROM</code>.</p> <p>By completing this section, you will know how to properly use the <code>SELECT</code> statement only comes from practice and experience in a wide variety of scenarios.</p>"},{"location":"DQL/#select-all-data","title":"SELECT All Data","text":"<p><code>SELECT</code> and show all rows and all columns from a single table is one of the simplest <code>SELECT</code> statements implementing only 1 of the optional clauses - the <code>FROM</code> clause.</p> <p>Right after the SELECT keyword we use an asterisk <code>*</code> to indicate all of the columns.</p> <p>The syntax for this scenario is shown below:</p> <pre><code>SELECT * FROM &lt;table&gt;;\n</code></pre> <p>Let's see all the rows and columns for the \"employee\" table. Type and execute:</p> <pre><code>SELECT * FROM employee;\n</code></pre> <p>\u2714\ufe0fYou should get back all 4 employee rows and all 5 columns (EMP_ID, FIRST_NAME, LAST_NAME, SALARY, BONUS).</p> <p></p> <p>Info</p> <p>Remember that, although UPPERCASE and lowercase are both permitted, by convention we use UPPERCASE for <code>SELECT</code> keyword clauses like <code>SELECT</code> and <code>FROM</code>. This helps us with readability.</p>"},{"location":"DQL/#select-specific-columns","title":"SELECT Specific Columns","text":"<p>The syntax for this scenario is shown below:</p> <pre><code>SELECT (column1,column2\u2026)\nFROM &lt;table&gt;;\n</code></pre> <p>Let's try this using \"employee\" table. We want to get back the employee names (last and first) and their salary.</p> <p>Type and execute the following command:</p> <pre><code>SELECT FIRST_NAME, LAST_NAME, SALARY FROM employee;\n</code></pre> <p>\u2714\ufe0fYou should get back all 4 employee rows but only 3 columns (FIRST_NAME, LAST_NAME, SALARY).</p> <p></p>"},{"location":"DQL/#select-computed-columns","title":"SELECT Computed Columns","text":"<p>We can retrieve all the rows from a table and some of the columns, but those columns could include a calculation to compute a derived value. Remember that derived values are derived from other columns and/or functions.</p>"},{"location":"DQL/#concat","title":"CONCAT","text":"<p>For good database design, we split people's names into first names and last names. But what if we want to recombine those into a single name? We could add the text for the first name together with the text from the last name (also known as concatenating 2 strings together).</p> <p>The syntax for this scenario is shown below:</p> <pre><code>SELECT CONCAT(column1, ' ', column2) FROM &lt;table&gt;;\n</code></pre> <p>By default, MySQL doesn't know what to call the column and so it names it based on the function we used. We can easily fix this, by giving the column an alias. An alias is just a nickname for the column so it looks better in the result.</p> <p>Copy and execute:</p> <pre><code>SELECT CONCAT(FIRST_NAME, ' ', LAST_NAME) AS \"Full Name\" FROM employee;\n</code></pre> <p></p> <p>\u2714\ufe0fBy adding the <code>AS \"Full Name\"</code> after the calculation of the derived value, we'll see our alias instead of \"No column name\". You should put double quotes around your alias if your alias includes spaces.</p>"},{"location":"DQL/#calculation","title":"CALCULATION","text":"<p>Sometimes, we need to get some derived values from the database. But we don't want to store those derived values in our database because it will take up more space in our database. Instead, we can directly calculate those values and only get the value we want. </p> <p>An example syntax for this scenario is shown below:</p> <pre><code>SELECT (column1 + column2) FROM &lt;table&gt;;\n</code></pre> <p>Let's see what is the total each employee will receive by executing the code below.</p> <pre><code>SELECT (SALARY + BONUS) AS TOTAL\nFROM employee;\n</code></pre> <p></p> <p>\u2714\ufe0f This gives us the total for each employee in the \"employee\" table by calculating the salary plus the bonus.</p>"},{"location":"DQL/#conclusion","title":"Conclusion","text":"<p>\ud83d\ude00We hope this section has been helpful with your deep learning on the <code>SELECT</code> commands. You can retrieve and manipulate the data you get from the databases. There are more options for the <code>SELECT</code> clauses, such as <code>WHERE</code>, <code>GROUP BY</code>, and <code>ORDER BY</code> for you to explore.</p>"},{"location":"glossary/","title":"Glossary","text":"Term Description Relational databases A type of database that organizes data into one or more tables with a predefined structure, allowing data to be easily accessed and manipulated using SQL queries. It has a set of instructions or commands that can be run to create databases and tables, modify existing tables, add data to tables, retrieve data from tables and add and modify users and permissions. Database objects Components within a database system, such as tables, indexes, views, and procedures, used to store, organize, and manipulate data. MySQL Workbench A visual tool for database design, modeling, and administration that enables users to manage MySQL databases and operate SQL development in a user-friendly graphical interface. Entity relationship diagrams A visual representation used to model and describe the relationships between data entities in a database system. Primary keys A unique identifier used to distinguish individual records within a database table, and it ensures data integrity and enables efficient data retrieval. Foreign keys A field in a database table that refers to the primary key of another table, used to establish a relationship between the two tables and enforce referential integrity constraints. Constraints Constraints are rules and limits applied to data fields in a database table, used to ensure data accuracy, consistency, and integrity. Schema In SQL, a schema (also referred as database) is a logical container for database objects such as tables, views, indexes, and procedures. Query script A query script is a program or script that is used to retrieve data from a database. It is typically written in a programming language designed for querying databases. In this documentation, it is written in SQL. VARCHAR() A data type used in a database system to store character string values with a variable length up to a specified maximum limit. <p>Author: Alice</p>"},{"location":"troubleshooting/","title":"Troubleshooting","text":"Error Message Error Causes Solutions Access denied for user 'username'@'localhost' (using password: YES) This error occurs when the user does not have the correct privileges to access the database or if the password entered is incorrect. To resolve this issue, check that the user has the correct privileges and try resetting the password. Table 'tablename' doesn't exist This error occurs when the table referenced in the query does not exist in the database Check that the table name is spelled correctly and that the table exists in the correct database. Duplicate entry 'value' for key 'keyname This error occurs when there is a duplicate value in a column that has a unique index. To resolve this issue, remove the duplicate value or change the column to allow duplicate values. Unknown column 'columnname' in 'field list This error occurs when the specified column does not exist in the table. Check that the column name is spelled correctly and that the column exists in the table. Data too long for column 'columnname' This error occurs when the value being inserted into a column exceeds the maximum length of the column. To resolve this issue, either increase the maximum length of the column or truncate the value being inserted to fit within the maximum length. Duplicate entry 'value' for key 'index_name The value you are trying to insert or update violates a unique key constraint. Check that the value is unique and not already present in the database. If it is a duplicate, modify the value or delete the existing record before inserting the new one. Tablespace is full The tablespace or disk where the database is stored is full. Free up space on the tablespace or disk by deleting old data or increasing the storage capacity. You can also move the database to a different tablespace or disk. <p>Author: Xiao</p>"}]}